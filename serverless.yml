org: lonestarresumes
app: resume-builder
service: resume-builder-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    tableName: resumes
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"
#    - Effect: Allow
#      Action:
#        - lambda:InvokeFunction
#        - lambda:InvokeAsync
#      Resource: "*"     

functions:
  create:
    handler: api/create.main
    events:
      - http:
          path: resume
          method: post
          cors: true
          authorizer: aws_iam

  get:
    handler: api/get.main
    events:
      - http:
          path: resume/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  list:
    handler: api/list.main
    events:
      - http:
          path: resume
          method: get
          cors: true
          authorizer: aws_iam
  
  update:
    handler: api/update.main
    events:
      - http:
          path: resume/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  delete:
    handler: api/delete.main
    events:
      - http:
          path: resume/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  downloadPDF:
    handler: api/downloadPDF.main
    events:
      - http:
          path: resume/download
          method: post
          cors: true
          authorizer: aws_iam
#    timeout: 30
#    memorySize: 2048
#    layers:
#      - arn:aws:lambda:us-east-1:584518215840:layer:headless-chrome:1

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}          